================
 Authentication
================

Users
=====

.. py:module:: exponent.auth.common

Users are uniquely identified by a user identifier. User identifiers
are random strings of sufficient length (320 bits worth of entropy).
Authentication mechanisms, like all other commands, only use this
identifier to refer to a user.

Users are created by calling the ``CreateUser`` command.

.. autoclass:: CreateUser

Names
=====

.. py:module:: exponent.auth.name

While user identifiers are very useful from a programmatic point of
view, it's rarely practical to ask users to remember a huge random
string. Therefore, there is a generic mechanism for registering
equally unique human-memorable user names, as well as for resolving
those names to user identifiers.

Names are not supposed to change regularly, so clients are encouraged
to cache these aggressively.

Registering names
-----------------

A name can be registered by calling the ``RegisterName`` command.

.. autoclass:: RegisterName

Implementing a name resolution method
-------------------------------------

The interface for name resolvers is ``INameResolver``.

.. autointerface:: INameResolver

Authentication methods
======================

Multi-factor authentication
---------------------------

.. py:currentmodule:: exponent.auth.common

Multi-factor authentication is inherently supported. The ``LogIn``
command takes a sequence of tokens, which are generated by individual
authentication commands.

.. autoclass:: LogIn

These tokens are long, random strings (320 bits of entropy). They have
a very limited validity: they are single-use and expire after one minute.

Password authentication
-----------------------

.. py:module:: exponent.auth.password

Secure password storage is part of the contract. Currently, passwords
are stored using the scrypt key derivation function, through the
txscrypt_ library.

.. _txscrypt: https://github.com/lvh/txscrypt

Setting a password
~~~~~~~~~~~~~~~~~~

The client calls ``SetPassword``.

.. autoclass:: SetPassword

Logging in with a password
~~~~~~~~~~~~~~~~~~~~~~~~~~

The client calls ``LoginWithPassword``.

.. autoclass:: LoginWithPassword

Session authentication
----------------------

.. py:module:: exponent.auth.session

Requesting a session identifier
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The client, when logged in, calls ``RequestSession``. It returns the
user identifier and the session identifier. The client stores these.

.. autoclass:: RequestSession

Logging in using a session
~~~~~~~~~~~~~~~~~~~~~~~~~~

The client logs in by calling ``LoginWithSession`` with the user's
identifier and a valid session identifier. It returns a new session
identifier. The client stores the new session identifier.

This invalidates the old session identifier.

.. autoclass:: LoginWithSession
